{"ast":null,"code":"var _jsxFileName = \"F:\\\\ttttt\\\\movies\\\\src\\\\components\\\\movieGrid\\\\MoviesGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./MoviesGrid.scss\";\nimport { useParams } from \"react-router\";\nimport tmdbApi, { category, movieType, tvType } from \"../../api/tmdbApi\";\nimport MovieCard from \"../movieCard/MovieCard\";\nimport { OutlineButton } from \"../button/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MoviesGrid(props) {\n  _s();\n\n  const [items, setItem] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n\n      if (keyword === undefined) {\n        const params = {};\n\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTVList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      setItem(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category, keyword]);\n\n  const loadMore = async () => {\n    let response = null;\n\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          break;\n\n        default:\n          response = await tmdbApi.getTVList(tvType.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    }\n\n    setItem(response.results);\n    setTotalPage(response.total_pages);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, id) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 45\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-grid__loadMore\",\n        children: /*#__PURE__*/_jsxDEV(OutlineButton, {\n          className: \"small\",\n          onClick: loadMore,\n          children: \"Load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoviesGrid, \"kqni7w/JV33S0/hv8s5x4AALeyo=\", false, function () {\n  return [useParams];\n});\n\n_c = MoviesGrid;\nexport default MoviesGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"sources":["F:/ttttt/movies/src/components/movieGrid/MoviesGrid.js"],"names":["React","useEffect","useState","useParams","tmdbApi","category","movieType","tvType","MovieCard","OutlineButton","MoviesGrid","props","items","setItem","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTVList","popular","query","search","results","total_pages","loadMore","map","item","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nimport \"./MoviesGrid.scss\";\r\nimport {useParams} from \"react-router\";\r\nimport tmdbApi, {category, movieType, tvType} from \"../../api/tmdbApi\";\r\nimport MovieCard from \"../movieCard/MovieCard\";\r\nimport {OutlineButton} from \"../button/button\";\r\n\r\nfunction MoviesGrid(props) {\r\n\r\n    const [items, setItem] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(0);\r\n    const {keyword} = useParams();\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n            if (keyword === undefined){\r\n                const params = {};\r\n                switch (props.category) {\r\n                    case category.movie:\r\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n                        break;\r\n                    default:\r\n                        response = await tmdbApi.getTVList(tvType.popular, {params});\r\n                }\r\n            } else {\r\n                const params = {\r\n                    query: keyword\r\n                }\r\n                response = await tmdbApi.search(props.category, {params});\r\n            }\r\n            setItem(response.results);\r\n            setTotalPage(response.total_pages);\r\n        }\r\n        getList();\r\n    }, [props.category, keyword]);\r\n\r\n\r\n    const loadMore = async () => {\r\n        let response = null;\r\n        if (keyword === undefined){\r\n            const params = {\r\n                page: page + 1\r\n            };\r\n            switch (props.category) {\r\n                case category.movie:\r\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n                    break;\r\n                default:\r\n                    response = await tmdbApi.getTVList(tvType.popular, {params});\r\n            }\r\n        } else {\r\n            const params = {\r\n                page: page + 1,\r\n                query: keyword\r\n            }\r\n            response = await tmdbApi.search(props.category, {params});\r\n        }\r\n        setItem(response.results);\r\n        setTotalPage(response.total_pages);\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"movie-grid\">\r\n                {\r\n                    items.map((item, id) => <MovieCard category={props.category} item={item} key={id}/>)\r\n                }\r\n            </div>\r\n            <div>\r\n                {\r\n                    page <totalPage ? (\r\n                        <div className=\"movie-grid__loadMore\">\r\n                            <OutlineButton\r\n                                className=\"small\"\r\n                                onClick={loadMore}\r\n                            >\r\n                                Load more\r\n                            </OutlineButton>\r\n                        </div>\r\n                    ) : \"\"\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoviesGrid;\r\n"]},"metadata":{},"sourceType":"module"}