{"ast":null,"code":"import axios from \"axios\";\nimport apiConfig from \"./apiConfig\";\nimport queryString from \"querystring\";\nconst axiosClient = axios.create({\n  baseURL: apiConfig.baseUrl,\n  headers: {\n    'content-Type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify({ ...params,\n    api_key: apiConfig.apikey\n  })\n});\naxiosClient.interceptors.request.use(async config => config);\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, e => {\n  throw e;\n});\nexport default axiosClient;","map":{"version":3,"sources":["F:/ttttt/movies/src/api/axiosClient.js"],"names":["axios","apiConfig","queryString","axiosClient","create","baseURL","baseUrl","headers","paramsSerializer","params","stringify","api_key","apikey","interceptors","request","use","config","response","data","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAGA,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEJ,SAAS,CAACK,OADU;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIP,WAAW,CAACQ,SAAZ,CAAsB,EAAC,GAAGD,MAAJ;AAAYE,IAAAA,OAAO,EAAEV,SAAS,CAACW;AAA/B,GAAtB;AALC,CAAb,CAApB;AAQAT,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkBA,MAAvD;AAEAb,WAAW,CAACU,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CAAuCE,QAAD,IAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AACD,SAAOD,QAAP;AACH,CALD,EAKIE,CAAD,IAAO;AACN,QAAMA,CAAN;AACH,CAPD;AASA,eAAehB,WAAf","sourcesContent":["import axios from \"axios\";\r\nimport apiConfig from \"./apiConfig\";\r\nimport queryString from \"querystring\";\r\n\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: apiConfig.baseUrl,\r\n    headers: {\r\n        'content-Type': 'application/json'\r\n    },\r\n    paramsSerializer: params => queryString.stringify({...params, api_key: apiConfig.apikey})\r\n});\r\n\r\naxiosClient.interceptors.request.use(async (config) => config);\r\n\r\naxiosClient.interceptors.response.use((response) => {\r\n    if( response && response.data) {\r\n        return response.data;\r\n    }\r\n    return response;\r\n}, (e) => {\r\n    throw e;\r\n})\r\n\r\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}