{"ast":null,"code":"var _jsxFileName = \"F:\\\\ttttt\\\\movies\\\\src\\\\components\\\\movieGrid\\\\MoviesGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./MoviesGrid.scss\";\nimport { useParams } from \"react-router\";\nimport tmdbApi, { category, movieType, tvType } from \"../../api/tmdbApi\";\nimport MovieCard from \"../movieCard/MovieCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MoviesGrid(props) {\n  _s();\n\n  const [items, setItem] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n\n      if (keyword === undefined) {\n        const params = {};\n\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTVList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      setItem(response.resuilts);\n      setTotalPage(response.total_page);\n    };\n\n    getList();\n  }, [props.category, keyword]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-grid\",\n    children: items.map((item, id) => /*#__PURE__*/_jsxDEV(MovieCard, {\n      category: props.category,\n      item: item\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoviesGrid, \"kqni7w/JV33S0/hv8s5x4AALeyo=\", false, function () {\n  return [useParams];\n});\n\n_c = MoviesGrid;\nexport default MoviesGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"sources":["F:/ttttt/movies/src/components/movieGrid/MoviesGrid.js"],"names":["React","useEffect","useState","useParams","tmdbApi","category","movieType","tvType","MovieCard","MoviesGrid","props","items","setItem","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTVList","popular","query","search","resuilts","total_page","map","item","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAO,mBAAP;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,OAAOC,OAAP,IAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,MAAtC,QAAmD,mBAAnD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAEvB,QAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBV,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAACe,IAAAA;AAAD,MAAYd,SAAS,EAA3B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,OAAO,GAAG,YAAY;AACxB,UAAIC,QAAQ,GAAG,IAAf;;AACA,UAAIF,OAAO,KAAKG,SAAhB,EAA0B;AACtB,cAAMC,MAAM,GAAG,EAAf;;AACA,gBAAQX,KAAK,CAACL,QAAd;AACI,eAAKA,QAAQ,CAACiB,KAAd;AACIH,YAAAA,QAAQ,GAAG,MAAMf,OAAO,CAACmB,aAAR,CAAsBjB,SAAS,CAACkB,QAAhC,EAA0C;AAACH,cAAAA;AAAD,aAA1C,CAAjB;AACA;;AACJ;AACIF,YAAAA,QAAQ,GAAG,MAAMf,OAAO,CAACqB,SAAR,CAAkBlB,MAAM,CAACmB,OAAzB,EAAkC;AAACL,cAAAA;AAAD,aAAlC,CAAjB;AALR;AAOH,OATD,MASO;AACH,cAAMA,MAAM,GAAG;AACXM,UAAAA,KAAK,EAAEV;AADI,SAAf;AAGAE,QAAAA,QAAQ,GAAG,MAAMf,OAAO,CAACwB,MAAR,CAAelB,KAAK,CAACL,QAArB,EAA+B;AAACgB,UAAAA;AAAD,SAA/B,CAAjB;AACH;;AACDT,MAAAA,OAAO,CAACO,QAAQ,CAACU,QAAV,CAAP;AACAb,MAAAA,YAAY,CAACG,QAAQ,CAACW,UAAV,CAAZ;AACH,KAnBD;;AAoBAZ,IAAAA,OAAO;AACV,GAtBQ,EAsBN,CAACR,KAAK,CAACL,QAAP,EAAiBY,OAAjB,CAtBM,CAAT;AAuBA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,cAEQN,KAAK,CAACoB,GAAN,CAAU,CAACC,IAAD,EAAOC,EAAP,kBACN,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAEvB,KAAK,CAACL,QAA3B;AAAqC,MAAA,IAAI,EAAE2B;AAA3C,OAAsDC,EAAtD;AAAA;AAAA;AAAA;AAAA,YADJ;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAtCQxB,U;UAKaN,S;;;KALbM,U;AAwCT,eAAeA,UAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nimport \"./MoviesGrid.scss\";\r\nimport {useParams} from \"react-router\";\r\nimport tmdbApi, {category, movieType, tvType} from \"../../api/tmdbApi\";\r\nimport MovieCard from \"../movieCard/MovieCard\";\r\n\r\nfunction MoviesGrid(props) {\r\n\r\n    const [items, setItem] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(0);\r\n    const {keyword} = useParams();\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n            if (keyword === undefined){\r\n                const params = {};\r\n                switch (props.category) {\r\n                    case category.movie:\r\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n                        break;\r\n                    default:\r\n                        response = await tmdbApi.getTVList(tvType.popular, {params});\r\n                }\r\n            } else {\r\n                const params = {\r\n                    query: keyword\r\n                }\r\n                response = await tmdbApi.search(props.category, {params});\r\n            }\r\n            setItem(response.resuilts);\r\n            setTotalPage(response.total_page);\r\n        }\r\n        getList();\r\n    }, [props.category, keyword])\r\n    return (\r\n        <div className=\"movie-grid\">\r\n            {\r\n                items.map((item, id) =>\r\n                    <MovieCard category={props.category} item={item} key={id} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoviesGrid;\r\n"]},"metadata":{},"sourceType":"module"}